// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketApp.Models;

#nullable disable

namespace TicketApp.Migrations
{
    [DbContext(typeof(MovieAppContext))]
    [Migration("20230731063611_bookingshowtimechange")]
    partial class bookingshowtimechange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicketApp.Models.Booking", b =>
                {
                    b.Property<int>("Bookingid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bookingid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Bookingid"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Iscancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("iscancelled")
                        .HasDefaultValueSql("false");

                    b.Property<int?>("Numofseats")
                        .HasColumnType("integer")
                        .HasColumnName("numofseats");

                    b.Property<int?>("Showtimeid")
                        .HasColumnType("integer")
                        .HasColumnName("showtimeid");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Bookingid")
                        .HasName("bookings_pkey");

                    b.HasIndex("Showtimeid");

                    b.HasIndex("Userid");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("TicketApp.Models.Movie", b =>
                {
                    b.Property<int>("Movieid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("movieid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Movieid"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("Poster")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("poster");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Movieid")
                        .HasName("movies_pkey");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("TicketApp.Models.Showtime", b =>
                {
                    b.Property<int>("Showtimeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("showtimeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Showtimeid"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<int?>("Movieid")
                        .HasColumnType("integer")
                        .HasColumnName("movieid");

                    b.Property<DateTime?>("Startdatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startdatetime");

                    b.HasKey("Showtimeid")
                        .HasName("showtimes_pkey");

                    b.HasIndex("Movieid");

                    b.ToTable("showtimes", (string)null);
                });

            modelBuilder.Entity("TicketApp.Models.User", b =>
                {
                    b.Property<int>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Userid"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<bool?>("Isadmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isadmin")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("Isregistered")
                        .HasColumnType("boolean")
                        .HasColumnName("isregistered");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.HasKey("Userid")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TicketApp.Models.Booking", b =>
                {
                    b.HasOne("TicketApp.Models.Showtime", "Showtime")
                        .WithMany("Bookings")
                        .HasForeignKey("Showtimeid")
                        .HasConstraintName("bookings_showtimeid_fkey");

                    b.HasOne("TicketApp.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("Userid")
                        .HasConstraintName("bookings_userid_fkey");

                    b.Navigation("Showtime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketApp.Models.Showtime", b =>
                {
                    b.HasOne("TicketApp.Models.Movie", "Movie")
                        .WithMany("Showtimes")
                        .HasForeignKey("Movieid")
                        .HasConstraintName("showtimes_movieid_fkey");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("TicketApp.Models.Movie", b =>
                {
                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("TicketApp.Models.Showtime", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("TicketApp.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
