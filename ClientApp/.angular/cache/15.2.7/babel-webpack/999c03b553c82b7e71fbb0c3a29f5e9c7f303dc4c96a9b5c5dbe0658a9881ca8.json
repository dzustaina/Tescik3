{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.BaseURI = formModel = this.fb.group({\n      FirstName: ['', Validators.required],\n      LastName: ['', [Validators.required, Validators.email]],\n      Email: ['', Validators.required],\n      Passwords: this.fb.group({\n        Password: ['', [Validators.required, Validators.minLength(8)]],\n        ConfirmPassowrd: ['', Validators.required]\n      }, {\n        validators: this.comparePasswords\n      })\n    });\n  }\n  comparePasswords(fb) {\n    const confirmPswrdCtrl = fb.get('ConfirmPassword');\n    if (confirmPswrdCtrl?.errors == null || 'passwordMismatch' in confirmPswrdCtrl.errors) {\n      if (fb.get('Passwords.Password')?.value != confirmPswrdCtrl?.value) confirmPswrdCtrl?.setErrors({\n        passwordMismatch: true\n      });else confirmPswrdCtrl?.setErrors(null);\n    }\n  }\n  register() {\n    var body = {\n      FirstName: this.formModel.value.FirstName,\n      LastName: this.formModel.value.LastName,\n      Email: this.formModel.value.Email,\n      Password: this.formModel.value.Password\n    };\n    this.http.post();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAMnE,OAAM,MAAOC,WAAW;EAEpBC,YAAoBC,EAAc,EAAUC,IAAe;IAAvC,OAAE,GAAFD,EAAE;IAAsB,SAAI,GAAJC,IAAI;IACvC,YAAO,GAEhBC,SAAS,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MACtBC,SAAS,EAAC,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACnCC,QAAQ,EAAC,CAAC,EAAE,EAAE,CAACT,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACU,KAAK,CAAC,CAAC;MACtDC,KAAK,EAAC,CAAC,EAAE,EAAEX,UAAU,CAACQ,QAAQ,CAAC;MAC/BI,SAAS,EAAE,IAAI,CAACT,EAAE,CAACG,KAAK,CAAC;QACrBO,QAAQ,EAAC,CAAC,EAAE,EAAE,CAACb,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACjEC,eAAe,EAAC,CAAC,EAAE,EAAEf,UAAU,CAACQ,QAAQ;OACvC,EAAC;QAACQ,UAAU,EAAG,IAAI,CAACC;MAAgB,CAAC;KAEzC,CAAC;EAZ4D;EAc9DA,gBAAgB,CAACd,EAAY;IACzB,MAAMe,gBAAgB,GAAGf,EAAE,CAACgB,GAAG,CAAC,iBAAiB,CAAC;IAClD,IAAGD,gBAAgB,EAAEE,MAAM,IAAI,IAAI,IAAI,kBAAkB,IAAIF,gBAAgB,CAACE,MAAM,EAAC;MACjF,IAAGjB,EAAE,CAACgB,GAAG,CAAC,oBAAoB,CAAC,EAAEE,KAAK,IAAGH,gBAAgB,EAAEG,KAAK,EAChEH,gBAAgB,EAAEI,SAAS,CAAC;QAACC,gBAAgB,EAAE;MAAI,CAAC,CAAC,CAAC,KAEtDL,gBAAgB,EAAEI,SAAS,CAAC,IAAI,CAAC;;EAEzC;EACAE,QAAQ;IACJ,IAAIC,IAAI,GAAG;MACPlB,SAAS,EAAE,IAAI,CAACF,SAAS,CAACgB,KAAK,CAACd,SAAS;MACzCE,QAAQ,EAAE,IAAI,CAACJ,SAAS,CAACgB,KAAK,CAACZ,QAAQ;MACvCE,KAAK,EAAE,IAAI,CAACN,SAAS,CAACgB,KAAK,CAACV,KAAK;MACjCE,QAAQ,EAAE,IAAI,CAACR,SAAS,CAACgB,KAAK,CAACR;KAClC;IACD,IAAI,CAACT,IAAI,CAACsB,IAAI,EAAE;EACpB;;AAjCSzB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAHR;AAAM","names":["Validators","UserService","constructor","fb","http","formModel","group","FirstName","required","LastName","email","Email","Passwords","Password","minLength","ConfirmPassowrd","validators","comparePasswords","confirmPswrdCtrl","get","errors","value","setErrors","passwordMismatch","register","body","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\justyna.kozuch\\Documents\\TicketApp\\ClientApp\\src\\app\\shared\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport {Injectable } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class UserService{\r\n    formModel: any;\r\n    constructor(private fb:FormBuilder, private http:HttpClient){ }\r\n    readonly BaseURI = \r\n\r\n    formModel = this.fb.group({\r\n        FirstName:['', Validators.required],\r\n        LastName:['', [Validators.required, Validators.email]],\r\n        Email:['', Validators.required],\r\n        Passwords: this.fb.group({\r\n            Password:['', [Validators.required, Validators.minLength(8)]],\r\n        ConfirmPassowrd:['', Validators.required]\r\n        },{validators : this.comparePasswords})\r\n        \r\n    });\r\n\r\n    comparePasswords(fb:FormGroup){\r\n        const confirmPswrdCtrl = fb.get('ConfirmPassword');\r\n        if(confirmPswrdCtrl?.errors == null || 'passwordMismatch' in confirmPswrdCtrl.errors){\r\n            if(fb.get('Passwords.Password')?.value!= confirmPswrdCtrl?.value)\r\n            confirmPswrdCtrl?.setErrors({passwordMismatch: true});\r\n            else\r\n            confirmPswrdCtrl?.setErrors(null);\r\n        }\r\n    }\r\n    register(){\r\n        var body = {\r\n            FirstName: this.formModel.value.FirstName,\r\n            LastName: this.formModel.value.LastName,\r\n            Email: this.formModel.value.Email,\r\n            Password: this.formModel.value.Password,\r\n        };\r\n        this.http.post()\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}