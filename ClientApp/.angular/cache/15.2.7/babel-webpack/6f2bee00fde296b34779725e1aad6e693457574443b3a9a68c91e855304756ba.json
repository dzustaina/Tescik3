{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class UserService {\n  constructor(fb) {\n    this.fb = fb;\n    this.formModel = this.fb.group({\n      FirstName: ['', Validators.required],\n      LastName: ['', [Validators.required, Validators.email]],\n      Email: ['', Validators.required],\n      Passwords: this.fb.group({\n        Password: ['', [Validators.required, Validators.minLength(8)]],\n        ConfirmPassowrd: ['', Validators.required]\n      }, {\n        validator: this.comparePasswords\n      })\n    });\n  }\n  comparePasswords(fb) {\n    let confirmPswrdCtrl = fb.get('ConfirmPassword');\n    if (confirmPswrdCtrl?.errors == null || 'passwordMismatch' in confirmPswrdCtrl.errors) {\n      if (fb.get('Password')?.value != confirmPswrdCtrl?.value) confirmPswrdCtrl.setErrors({\n        passwordMismatch: true\n      });else confirmPswrdCtrl.setErrors(null);\n    }\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.FormBuilder));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;AAMnE,OAAM,MAAOC,WAAW;EACpBC,YAAoBC,EAAc;IAAd,OAAE,GAAFA,EAAE;IAEtB,cAAS,GAAG,IAAI,CAACA,EAAE,CAACC,KAAK,CAAC;MACtBC,SAAS,EAAC,CAAC,EAAE,EAAEL,UAAU,CAACM,QAAQ,CAAC;MACnCC,QAAQ,EAAC,CAAC,EAAE,EAAE,CAACP,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACQ,KAAK,CAAC,CAAC;MACtDC,KAAK,EAAC,CAAC,EAAE,EAAET,UAAU,CAACM,QAAQ,CAAC;MAC/BI,SAAS,EAAE,IAAI,CAACP,EAAE,CAACC,KAAK,CAAC;QACrBO,QAAQ,EAAC,CAAC,EAAE,EAAE,CAACX,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACjEC,eAAe,EAAC,CAAC,EAAE,EAAEb,UAAU,CAACM,QAAQ;OACvC,EAAC;QAACQ,SAAS,EAAG,IAAI,CAACC;MAAgB,CAAC;KAExC,CAAC;EAXmC;EAarCA,gBAAgB,CAACZ,EAAY;IACzB,IAAIa,gBAAgB,GAAGb,EAAE,CAACc,GAAG,CAAC,iBAAiB,CAAC;IAChD,IAAGD,gBAAgB,EAAEE,MAAM,IAAI,IAAI,IAAI,kBAAkB,IAAIF,gBAAgB,CAACE,MAAM,EAAC;MACjF,IAAGf,EAAE,CAACc,GAAG,CAAC,UAAU,CAAC,EAAEE,KAAK,IAAGH,gBAAgB,EAAEG,KAAK,EACtDH,gBAAgB,CAACI,SAAS,CAAC;QAACC,gBAAgB,EAAE;MAAI,CAAC,CAAC,CAAC,KAErDL,gBAAgB,CAACI,SAAS,CAAC,IAAI,CAAC;;EAExC;;AAtBSnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAHR;AAAM","names":["Validators","UserService","constructor","fb","group","FirstName","required","LastName","email","Email","Passwords","Password","minLength","ConfirmPassowrd","validator","comparePasswords","confirmPswrdCtrl","get","errors","value","setErrors","passwordMismatch","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\justyna.kozuch\\Documents\\TicketApp\\ClientApp\\src\\app\\shared\\user.service.ts"],"sourcesContent":["import {Injectable } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class UserService{\r\n    constructor(private fb:FormBuilder){ }\r\n\r\n    formModel = this.fb.group({\r\n        FirstName:['', Validators.required],\r\n        LastName:['', [Validators.required, Validators.email]],\r\n        Email:['', Validators.required],\r\n        Passwords: this.fb.group({\r\n            Password:['', [Validators.required, Validators.minLength(8)]],\r\n        ConfirmPassowrd:['', Validators.required]\r\n        },{validator : this.comparePasswords})\r\n        \r\n    });\r\n\r\n    comparePasswords(fb:FormGroup){\r\n        let confirmPswrdCtrl = fb.get('ConfirmPassword');\r\n        if(confirmPswrdCtrl?.errors == null || 'passwordMismatch' in confirmPswrdCtrl.errors){\r\n            if(fb.get('Password')?.value!= confirmPswrdCtrl?.value)\r\n            confirmPswrdCtrl.setErrors({passwordMismatch: true});\r\n            else\r\n            confirmPswrdCtrl.setErrors(null);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}